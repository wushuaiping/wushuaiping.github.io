{"title":"设计模式之代理模式(上) 静态代理与JDK动态代理","date":"2018-03-13T14:13:27.000Z","slug":"设计模式之代理模式-上-静态代理与JDK动态代理","comments":true,"tags":["设计模式"],"updated":"2019-05-11T17:12:35.333Z","content":"<h1 id=\"代理模式\">代理模式<a href=\"post/设计模式之代理模式-上-静态代理与JDK动态代理#代理模式\"></a></h1><ul>\n<li>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。</li>\n</ul>\n<h2 id=\"静态代理\">静态代理<a href=\"post/设计模式之代理模式-上-静态代理与JDK动态代理#静态代理\"></a></h2><p>静态代理是由我们编写好的类，在程序运行之前就已经编译好的的类，此时就叫静态代理。<br>说理论还是比较懵逼的，直接上代码：</p>\n<blockquote>\n<p>抽象主题，可以想象成我们的业务接口。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象主题。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/13 下午10:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISubject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  比如现在有个业务功能，需要开启某项校验。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">enableCheck</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>真实主题，可以想象成我们对业务接口的实现类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  真实主题</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/13 下午10:21</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISubject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enableCheck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我开启了某项校验~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>但是有一天，我突然想加个日志记录，但是我不想去改动原有的方法。那么我们就可以使用这种方式：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  代理类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/13 下午10:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxySubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISubject</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISubject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxySubject</span><span class=\"params\">(ISubject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对被代理对象的方法进行增强</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enableCheck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        subject.enableCheck();</span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我记录一下启动校验前的相关日志。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我记录一下启动校验后的相关日志。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>我们使用静态代理后，来试试看这种方式能不能行？测试代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ApiException </span>&#123;</span><br><span class=\"line\">        ProxySubject proxy = <span class=\"keyword\">new</span> ProxySubject(<span class=\"keyword\">new</span> RealSubject());</span><br><span class=\"line\">        proxy.enableCheck();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>运行结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我记录一下启动校验前的相关日志</span><br><span class=\"line\">我开启了某项校验~~</span><br><span class=\"line\">我记录一下启动校验后的相关日志。</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>静态代理模式相对比较简单，但是缺点肯定也是有的：</p>\n<ol>\n<li><p>一个代理对象只能服务于一个类。如果有很多类需要记录日志的话，你的一个一个去实现。。累不死你。。</p>\n</li>\n<li><p>代理对象必须实现接口，如上。一个字：还是累。</p>\n</li>\n</ol>\n<h2 id=\"动态代理\">动态代理<a href=\"post/设计模式之代理模式-上-静态代理与JDK动态代理#动态代理\"></a></h2><p>这里动态代理使用的是JDK的动态代理实现的，JDK的动态代理必须是目标对象实现接口才可以。也就是相当于我们上面的业务实现类(RealSubject)。使用CGLIB就不用实现接口也可完成动态代理，但是今天时间不多了，明天还得搬砖，所以先把JDK动态代理学了，明天再学学CGLIB的动态代理。<br>代码如下:</p>\n<blockquote>\n<p>要实现动态代理；需要先去实现InvocationHandler接口，这个接口提供了invoke方法，该方法相信用过反射或者AOP的同学应该都比较熟悉，我这里就不多讲了。实现了这个后我们可以调用目标方法了，但是我们需要代理的对象还不知道从何而来，所以我们还需要使用JDK提供的Proxy.newProxyInstance方法，第一个参数是目标代理类的类加载器，第二个参数是目标代理类实现的接口，第三个参数的话是目标代理类的调用处理程序就是InvokeHandler啦。用该方法可以生产代理对象。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  使用Java的动态代理实现</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/13 下午10:43</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxyInstance</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">        <span class=\"comment\">// 使用Java的获取代理实例方法来获取代理实例。。好绕啊。。反正就是获取代理实例-_-</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 增强, 调用目标方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"comment\">// 因为我们需要被增强的方法enableCheck是没有返回参数的，所以不需要返回值。</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果有返回值 Object res = method.invoke(proxy, args); return res;就可以了</span></span><br><span class=\"line\">        method.invoke(target, args);</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"操作之前的日志记录~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"操作之后的日志记录~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>Test case<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ApiException </span>&#123;</span><br><span class=\"line\">        DynamicProxy proxy = <span class=\"keyword\">new</span> DynamicProxy();</span><br><span class=\"line\">        ISubject subject = (ISubject)proxy.getProxyInstance(<span class=\"keyword\">new</span> RealSubject());</span><br><span class=\"line\">        subject.enableCheck();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>运行结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作之前的日志记录~~</span><br><span class=\"line\">我开启了某项校验~~</span><br><span class=\"line\">操作之后的日志记录~~</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>今天的设计模式算是学完啦，抽象工厂模式感觉我可能思维不够抽象，所以到现在还没能理解抽象工厂模式到底能干嘛？实际中有何用处？本文用于个人学习记录，有写的不好的地方，还请各位大佬指点一二！</p>\n<p>good night！</p>\n","prev":{"title":"设计模式之代理模式(下) CGLIB动态代理","slug":"设计模式之代理模式-下-CGLIB动态代理"},"next":{"title":"设计模式之简单工厂模式","slug":"设计模式之简单工厂模式"},"link":"http://wooo.io/post/设计模式之代理模式-上-静态代理与JDK动态代理/","toc":[{"title":"代理模式","id":"代理模式","index":"1","children":[{"title":"静态代理","id":"静态代理","index":"1.1"},{"title":"动态代理","id":"动态代理","index":"1.2"}]}]}