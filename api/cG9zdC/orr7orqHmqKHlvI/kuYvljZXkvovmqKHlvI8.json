{"title":"设计模式之单例模式","date":"2018-03-10T01:17:00.000Z","slug":"设计模式之单例模式","comments":true,"tags":["设计模式"],"updated":"2019-05-11T17:13:18.083Z","content":"<h1 id=\"单例模式\">单例模式<a href=\"post/设计模式之单例模式#单例模式\"></a></h1><ul>\n<li>只有一个实例；       </li>\n<li>必须由自己创建自己的唯一实例；         </li>\n<li>必须提供一个公共方法供其他对象使用自己的实例。</li>\n</ul>\n<h2 id=\"饿汉式单例模式\">饿汉式单例模式<a href=\"post/设计模式之单例模式#饿汉式单例模式\"></a></h2><p>饿汉式顾名思义，不管你需不需要，只要你引用了该类，就会创建对象的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *  经典的饿汉式单例模式</span><br><span class=\"line\"> * [<span class=\"meta\">@author</span>](https:<span class=\"comment\">//my.oschina.net/arthor) wushuaiping</span></span><br><span class=\"line\"> * [<span class=\"meta\">@date</span>](https:<span class=\"comment\">//my.oschina.net/u/2504391) 2018/3/10 上午9:17</span></span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒汉式单例模式\">懒汉式单例模式<a href=\"post/设计模式之单例模式#懒汉式单例模式\"></a></h2><p>but .. 上述写法无法做到lazy load(延迟加载)，lazy load意思就是我在需要的时候才去创建实例。于是我们可以使用如下写法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  保证lazy load的单例模式，懒汉式单例</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/10 上午9:17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"线程安全的懒汉单例模式\">线程安全的懒汉单例模式<a href=\"post/设计模式之单例模式#线程安全的懒汉单例模式\"></a></h2><p>but.. 上述写法无法保证线程安全性，如果在单线程环境下，上述写法，就不会出现创建重复的对象的情况，但是如果在多线程情况下，有多条线程同时调用了getSingleton()方法，那么极有可能创建出多余且重复的对象。那么此时想到的解决方案是对代码块或者方法加入同步锁，保证线程安全，于是我们可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  保证lazy load并且保证线程安全的单例模式，懒汉式单例</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/10 上午9:17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  保证lazy load并且保证线程安全的单例模式，懒汉式单例</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/10 上午9:17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"即保证线程安全也保证效率的懒汉式单例\">即保证线程安全也保证效率的懒汉式单例<a href=\"post/设计模式之单例模式#即保证线程安全也保证效率的懒汉式单例\"></a></h2><p>but.. 通过上述写法，我们虽然保证了线程安全，但是我们代码的效率却降低了，why？ 因为我们使用了synchronized啊，当一个线程进入synchronized修饰的方法或者代码块后，其他线程必须在后面排队，导致了代码的效率的降低，于是我们可以使用Duoble-check来继续优化代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  保证lazy load并且保证线程安全还兼顾了效率的单例模式，懒汉式单例</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/10 上午9:17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方式为什么能保证效率呢？我们写懒汉式单例的原因是，我们不想要在JVM加载类的时候就创建对象，而是在我们需要该对象的时候才去创建对象，所以我们想到了懒汉式单例模式，而正是因为懒汉式单例模式的特性，通过Duoble-check，每个线程经过第一个<code>if(singleton == null)</code>的时候，基本都会因为之前已经创建过了该对象，而直接返回，所以，该方式效率得到了保证。</p>\n<p>实现单例的方式有很多种。我只是列出了几种常见的单例模式，当然最常见的还是枚举。如果各位有更好的单例模式请指教，本文只做个人笔记记录，欢迎各位看官批评。  O(∩_∩)O谢谢</p>\n","prev":{"title":"设计模式之简单工厂模式","slug":"设计模式之简单工厂模式"},"next":{"title":"解决github fatal: unable to access 'xxxx': Could not resolve host:xxx的问题","slug":"解决github-fatal-unable-to-access-xxxx-Could-not-resolve-host-xxx的问题"},"link":"http://wooo.io/post/设计模式之单例模式/","toc":[{"title":"单例模式","id":"单例模式","index":"1","children":[{"title":"饿汉式单例模式","id":"饿汉式单例模式","index":"1.1"},{"title":"懒汉式单例模式","id":"懒汉式单例模式","index":"1.2"},{"title":"线程安全的懒汉单例模式","id":"线程安全的懒汉单例模式","index":"1.3"},{"title":"即保证线程安全也保证效率的懒汉式单例","id":"即保证线程安全也保证效率的懒汉式单例","index":"1.4"}]}]}