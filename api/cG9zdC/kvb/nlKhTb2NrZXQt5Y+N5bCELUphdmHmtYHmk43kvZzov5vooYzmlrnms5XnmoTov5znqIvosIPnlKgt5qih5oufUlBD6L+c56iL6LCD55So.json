{"title":"使用Socket&反射&Java流操作进行方法的远程调用(模拟RPC远程调用)","date":"2018-03-15T04:22:00.000Z","slug":"使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用","comments":true,"tags":["Socket/反射"],"updated":"2019-05-11T17:14:26.800Z","content":"<h2 id=\"写在前面\">写在前面<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#写在前面\"></a></h2><p>阅读本文首先得具备基本的Socket、反射、Java流操作的基本API使用知识；否则本文你可能看不懂。。。</p>\n<h3 id=\"服务端的端口监听\">服务端的端口监听<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#服务端的端口监听\"></a></h3><blockquote>\n<p>进行远程调用，那就必须得有客户端和服务端。服务端负责提供服务，客户端来对服务端进行方法调用。所以现在我们清楚了： 需要一个服务端、一个客户端</p>\n</blockquote>\n<p>那么我们说干就干，我们先建立一个服务端：</p>\n<ul>\n<li>通过Socket监听本地服务器的一个端口(8081)</li>\n<li>调用socket的accept方法等待客户端的连接(<a href=\"http://blog.csdn.net/eric_ley/article/details/54861099\" target=\"_blank\" rel=\"noopener\">accpet方法原理</a>)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC服务端</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectServerSerializ</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动服务端，并监听8081端口</span></span><br><span class=\"line\">            ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8081</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 服务端启动后，等待客户端建立连接</span></span><br><span class=\"line\">            Socket accept = serverSocket.accept();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"客户端与服务端建立连接\">客户端与服务端建立连接<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#客户端与服务端建立连接\"></a></h3><p>我们服务端监听了端口后，那么我们需要使用客户端去访问目标服务端的这个端口，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC客户端，这里发起调用请求。</span></span><br><span class=\"line\"><span class=\"comment\"> *   模拟RPC框架调用过程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectClientSerializ</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 使用Socket与指定IP的主机端口进行连接。</span></span><br><span class=\"line\">                Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8081</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"业务方法\">业务方法<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#业务方法\"></a></h3><p>与服务端建立连接后，那我们进行下一步。因为我们要模拟RPC远程调用，那么我们的有一个业务方法：</p>\n<blockquote>\n<p>业务方法接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 业务方法接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>业务方法实现类</p>\n<blockquote>\n<p>远程调用必须要实现序列化接口(Serializable)。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">203100359025257718L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"执行方法体,入参=\"</span> + str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n<h3 id=\"数据传输模型对象\">数据传输模型对象<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#数据传输模型对象\"></a></h3><p>我们有了服务方法后，首先想到的是，我们如果将序列化后的对象传输到服务端以后，服务端如何知道这是哪个对象？不可能使用Object来调用方法吧，所以我们需要一个能封装业务类方法信息的数据传输对象。那么该数据传输对象需要具备哪些信息？服务端调用肯定得用反射来调用方法，所以我们这个数据传输对象就得满足一下条件：</p>\n<ul>\n<li>第一，反射调用时必须知道方法名 String methodName</li>\n<li>第二，反射调用时必须知道方法参数类型  Object[] parameterTypes</li>\n<li>第三，反射调用时必须知道参数 Object[] parameters</li>\n<li>第四，反射调用时必须知道哪个对象在调用 Object invokeObject</li>\n</ul>\n<p>满足以上条件后，就可以进行反射调用方法了，但是，我们通过服务端调用后，我们需要知道服务端返回的数据信息。那么该对象还需要一个参数：</p>\n<ul>\n<li>第五，需要一个返回对象 Object result</li>\n</ul>\n<p>通过上述分析，我们建立了该对象：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  数据传输模型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:25</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransportModel</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">6338270997494457923L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object result;</span><br><span class=\"line\">    <span class=\"comment\">//对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object object;</span><br><span class=\"line\">    <span class=\"comment\">//方法名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String methodName;</span><br><span class=\"line\">    <span class=\"comment\">//参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] parameters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParameterTypes</span><span class=\"params\">(Class&lt;?&gt;[] parameterTypes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parameterTypes = parameterTypes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt;[] getParameterTypes() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameterTypes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(Object result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObject</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.object = object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMethodName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMethodName</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.methodName = methodName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object[] getParameters() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParameters</span><span class=\"params\">(Object[] parameters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parameters = parameters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"客户端设置相应调用信息\">客户端设置相应调用信息<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#客户端设置相应调用信息\"></a></h3><p>有了数据传输模型后，我们将需要的对象信息封装进数据传输模型，我们就可以真正的开始对服务端的服务进行调用了！<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC客户端，这里发起调用请求。</span></span><br><span class=\"line\"><span class=\"comment\"> *   模拟RPC框架调用过程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectClientSerializ</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 使用Socket与指定IP的主机端口进行连接。</span></span><br><span class=\"line\">                Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8081</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 创建一个业务对象，模拟客户端发起调用。</span></span><br><span class=\"line\">                HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 该传输模型对象存储了客户端发起调用的业务对象的一些信息。</span></span><br><span class=\"line\">                TransportModel model = <span class=\"keyword\">new</span> TransportModel();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置客户端的调用对象</span></span><br><span class=\"line\">                model.setObject(helloService);</span><br><span class=\"line\">                <span class=\"comment\">// 设置需要调用的方法</span></span><br><span class=\"line\">                model.setMethodName(<span class=\"string\">\"sayHello\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 获得业务对象的字节码信息</span></span><br><span class=\"line\">                Class class1 = helloService.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 在业务对象的字节码信息中获取\"sayHello\"并且方法入参为String的方法</span></span><br><span class=\"line\">                Method method = class1.getMethod(<span class=\"string\">\"sayHello\"</span>,String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置传输模型对象中的调用信息。</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置方法参数类型</span></span><br><span class=\"line\">                model.setParameterTypes(method.getParameterTypes());</span><br><span class=\"line\">                <span class=\"comment\">// 设置方法参数</span></span><br><span class=\"line\">                model.setParameters(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"The first step of RPC\"</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"将数据传输模型对象发送到服务端\">将数据传输模型对象发送到服务端<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#将数据传输模型对象发送到服务端\"></a></h3><p>在设置好相关调用信息后，现在终于可以去服务端调用了，但是我们不可能直接将数据传输模型对象“给”服务端，在网络中传输数据都是以流(<a href=\"https://baike.baidu.com/item/BitTorrent/142795?fr=aladdin&amp;fromid=6435599&amp;fromtitle=%E6%AF%94%E7%89%B9%E6%B5%81\" target=\"_blank\" rel=\"noopener\">比特流</a>)的形式传输的, 所以我们还要将数据传输模型对象转为流，传输给服务端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC客户端，这里发起调用请求。</span></span><br><span class=\"line\"><span class=\"comment\"> *   模拟RPC框架调用过程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectClientSerializ</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 使用Socket与指定IP的主机端口进行连接。</span></span><br><span class=\"line\">                Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8081</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 创建一个业务对象，模拟客户端发起调用。</span></span><br><span class=\"line\">                HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 该传输模型对象存储了客户端发起调用的业务对象的一些信息。</span></span><br><span class=\"line\">                TransportModel model = <span class=\"keyword\">new</span> TransportModel();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置客户端的调用对象</span></span><br><span class=\"line\">                model.setObject(helloService);</span><br><span class=\"line\">                <span class=\"comment\">// 设置需要调用的方法</span></span><br><span class=\"line\">                model.setMethodName(<span class=\"string\">\"sayHello\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 获得业务对象的字节码信息</span></span><br><span class=\"line\">                Class class1 = helloService.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 在业务对象的字节码信息中获取\"sayHello\"并且方法入参为String的方法</span></span><br><span class=\"line\">                Method method = class1.getMethod(<span class=\"string\">\"sayHello\"</span>,String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置传输模型对象中的调用信息。</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置方法参数类型</span></span><br><span class=\"line\">                model.setParameterTypes(method.getParameterTypes());</span><br><span class=\"line\">                <span class=\"comment\">// 设置方法参数</span></span><br><span class=\"line\">                model.setParameters(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"The first step of RPC\"</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 把存储了业务对象信息的数据传输模型对象转为流，也就是序列化对象。方便在网络中传输。</span></span><br><span class=\"line\">                ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">                oos.writeObject(model);</span><br><span class=\"line\">                oos.flush();</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] byteArray = bos.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获得一个socket的输出流。通过该流可以将数据传输到服务端。</span></span><br><span class=\"line\">                OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 往输出流中写入需要进行传输的序列化后的流信息</span></span><br><span class=\"line\">                outputStream.write(byteArray);</span><br><span class=\"line\">                outputStream.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取服务端返回的信息\">获取服务端返回的信息<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#获取服务端返回的信息\"></a></h3><p>当我们把数据序列化后以流的方式传输给了服务端。肯定不是大功告成了，因为我们还得知道服务端给我们返回了什么东西：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC客户端，这里发起调用请求。</span></span><br><span class=\"line\"><span class=\"comment\"> *   模拟RPC框架调用过程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectClientSerializ</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 使用Socket与指定IP的主机端口进行连接。</span></span><br><span class=\"line\">                Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8081</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 创建一个业务对象，模拟客户端发起调用。</span></span><br><span class=\"line\">                HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 该传输模型对象存储了客户端发起调用的业务对象的一些信息。</span></span><br><span class=\"line\">                TransportModel model = <span class=\"keyword\">new</span> TransportModel();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置客户端的调用对象</span></span><br><span class=\"line\">                model.setObject(helloService);</span><br><span class=\"line\">                <span class=\"comment\">// 设置需要调用的方法</span></span><br><span class=\"line\">                model.setMethodName(<span class=\"string\">\"sayHello\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 获得业务对象的字节码信息</span></span><br><span class=\"line\">                Class class1 = helloService.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 在业务对象的字节码信息中获取\"sayHello\"并且方法入参为String的方法</span></span><br><span class=\"line\">                Method method = class1.getMethod(<span class=\"string\">\"sayHello\"</span>,String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置传输模型对象中的调用信息。</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置方法参数类型</span></span><br><span class=\"line\">                model.setParameterTypes(method.getParameterTypes());</span><br><span class=\"line\">                <span class=\"comment\">// 设置方法参数</span></span><br><span class=\"line\">                model.setParameters(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"The first step of RPC\"</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 把存储了业务对象信息的数据传输模型对象转为流，也就是序列化对象。方便在网络中传输。</span></span><br><span class=\"line\">                ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">                oos.writeObject(model);</span><br><span class=\"line\">                oos.flush();</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] byteArray = bos.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获得一个socket的输出流。通过该流可以将数据传输到服务端。</span></span><br><span class=\"line\">                OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 往输出流中写入需要进行传输的序列化后的流信息</span></span><br><span class=\"line\">                outputStream.write(byteArray);</span><br><span class=\"line\">                outputStream.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 因为socket建立的是长连接，所以可以获取到将流数据传到服务端后，返回的信息。</span></span><br><span class=\"line\">                <span class=\"comment\">// 所以我们需要通过输入流，来获取服务端返回的流数据信息。</span></span><br><span class=\"line\">                InputStream inputStream = socket.getInputStream();</span><br><span class=\"line\">                ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 将得到的流数据读成Object对象，强转为我们的数据传输模型对象。最后得到服务端返回的结果。</span></span><br><span class=\"line\">                TransportModel readObject = (TransportModel)ois.readObject();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"调用返回结果=\"</span>+readObject.getResult());</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"客户端调用结束\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时，我们客户端的调用算是大功告成了。接下来我们应该去服务端接收客户端发送过来的数据了。</p>\n<h3 id=\"服务端接收客户端数据\">服务端接收客户端数据<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#服务端接收客户端数据\"></a></h3><p>客户端接收到的数据是以流方式存在的，所以需要反序列化转流为Java对象。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC服务端</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectServerSerializ</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动服务端，并监听8081端口</span></span><br><span class=\"line\">            ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8081</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 服务端启动后，等待客户端建立连接</span></span><br><span class=\"line\">            Socket accept = serverSocket.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取客户端的输入流，并将流信息读成Object对象。</span></span><br><span class=\"line\">            <span class=\"comment\">// 然后强转为我们的数据传输模型对象，因为我们客户端也是用的该对象进行传输，所以强转没有问题。</span></span><br><span class=\"line\">            InputStream inputStream = accept.getInputStream();</span><br><span class=\"line\">            ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(inputStream);</span><br><span class=\"line\">            TransportModel transportModel = (TransportModel) ois.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"服务端通过反射调用方法\">服务端通过反射调用方法<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#服务端通过反射调用方法\"></a></h3><p>因为需要调用的对象方法等相关数据都封装在数据传输模型对象里面，所以我们只需要把里面的参数拿出来，再通过反射去掉用服务端存在的本地方法即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC服务端</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectServerSerializ</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动服务端，并监听8081端口</span></span><br><span class=\"line\">            ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8081</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 服务端启动后，等待客户端建立连接</span></span><br><span class=\"line\">            Socket accept = serverSocket.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取客户端的输入流，并将流信息读成Object对象。</span></span><br><span class=\"line\">            <span class=\"comment\">// 然后强转为我们的数据传输模型对象，因为我们客户端也是用的该对象进行传输，所以强转没有问题。</span></span><br><span class=\"line\">            InputStream inputStream = accept.getInputStream();</span><br><span class=\"line\">            ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(inputStream);</span><br><span class=\"line\">            TransportModel transportModel = (TransportModel) ois.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 因为客户端在把流信息发过来之前，已经把相关的调用信息封装进我们的数据传输模型对象中了</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以这里我们可以直接拿到这些对象的信息，然后通过反射，对方法进行调用。</span></span><br><span class=\"line\">            Object object = transportModel.getObject();</span><br><span class=\"line\">            String methodName = transportModel.getMethodName();</span><br><span class=\"line\">            Class&lt;?&gt;[] parameterTypes = transportModel.getParameterTypes();</span><br><span class=\"line\">            Object[] parameters = transportModel.getParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 通过方法名和方法参数类型，得到一个方法对象</span></span><br><span class=\"line\">            Method method = object.getClass().getMethod(methodName,parameterTypes);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 然后通过这个方法对象去掉用目标方法，返回的是这个方法执行后返回的数据</span></span><br><span class=\"line\">            Object res = method.invoke(object, parameters);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"提供服务端执行方法返回结果：\"</span>+res);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"服务端将数据返回给客户端\">服务端将数据返回给客户端<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#服务端将数据返回给客户端\"></a></h3><p>服务端通过反射调用完目标方法后，我们还需要将调用目标方法后得到的数据返回给客户端。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  RPC服务端</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wushuaiping</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/3/15 下午12:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectServerSerializ</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动服务端，并监听8081端口</span></span><br><span class=\"line\">            ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8081</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 服务端启动后，等待客户端建立连接</span></span><br><span class=\"line\">            Socket accept = serverSocket.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取客户端的输入流，并将流信息读成Object对象。</span></span><br><span class=\"line\">            <span class=\"comment\">// 然后强转为我们的数据传输模型对象，因为我们客户端也是用的该对象进行传输，所以强转没有问题。</span></span><br><span class=\"line\">            InputStream inputStream = accept.getInputStream();</span><br><span class=\"line\">            ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(inputStream);</span><br><span class=\"line\">            TransportModel transportModel = (TransportModel) ois.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 因为客户端在把流信息发过来之前，已经把相关的调用信息封装进我们的数据传输模型对象中了</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以这里我们可以直接拿到这些对象的信息，然后通过反射，对方法进行调用。</span></span><br><span class=\"line\">            Object object = transportModel.getObject();</span><br><span class=\"line\">            String methodName = transportModel.getMethodName();</span><br><span class=\"line\">            Class&lt;?&gt;[] parameterTypes = transportModel.getParameterTypes();</span><br><span class=\"line\">            Object[] parameters = transportModel.getParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 通过方法名和方法参数类型，得到一个方法对象</span></span><br><span class=\"line\">            Method method = object.getClass().getMethod(methodName,parameterTypes);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 然后通过这个方法对象去掉用目标方法，返回的是这个方法执行后返回的数据</span></span><br><span class=\"line\">            Object res = method.invoke(object, parameters);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"提供服务端执行方法返回结果：\"</span>+res);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获得服务端的输出流</span></span><br><span class=\"line\">            OutputStream outputStream = accept.getOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 建立一个字节数组输出流对象。把数据传输模型对象序列化。方便进行网络传输</span></span><br><span class=\"line\">            ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建一个数据传输模型对象，将服务端的返回数据传到客户端。</span></span><br><span class=\"line\">            TransportModel transportModel1 = <span class=\"keyword\">new</span> TransportModel();</span><br><span class=\"line\">            transportModel1.setResult(res);</span><br><span class=\"line\">            oos.writeObject(transportModel1);</span><br><span class=\"line\"></span><br><span class=\"line\">            outputStream.write(bos.toByteArray());</span><br><span class=\"line\">            outputStream.flush();</span><br><span class=\"line\">            bos.close();</span><br><span class=\"line\">            outputStream.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"服务端关闭\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试\">测试<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#测试\"></a></h3><p>先启动服务端的main方法，在启用客户端的main方法。之后我们会看到如下输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用返回结果=The first step of RPC</span><br><span class=\"line\">客户端调用结束</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"写在最后\">写在最后<a href=\"post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用#写在最后\"></a></h2><p>至此，方法的远程调用已经完成~~<br>这篇文章写得有点仓促，明天还有面试。今天就先这样了~ 晚安~</p>\n","prev":{"title":"正则表达式入门常用元字符","slug":"正则表达式入门常用元字符"},"next":{"title":"设计模式之代理模式(下) CGLIB动态代理","slug":"设计模式之代理模式-下-CGLIB动态代理"},"link":"http://wooo.io/post/使用Socket-反射-Java流操作进行方法的远程调用-模拟RPC远程调用/","toc":[{"title":"写在前面","id":"写在前面","index":"1","children":[{"title":"服务端的端口监听","id":"服务端的端口监听","index":"1.1"},{"title":"客户端与服务端建立连接","id":"客户端与服务端建立连接","index":"1.2"},{"title":"业务方法","id":"业务方法","index":"1.3"},{"title":"数据传输模型对象","id":"数据传输模型对象","index":"1.4"},{"title":"客户端设置相应调用信息","id":"客户端设置相应调用信息","index":"1.5"},{"title":"将数据传输模型对象发送到服务端","id":"将数据传输模型对象发送到服务端","index":"1.6"},{"title":"获取服务端返回的信息","id":"获取服务端返回的信息","index":"1.7"},{"title":"服务端接收客户端数据","id":"服务端接收客户端数据","index":"1.8"},{"title":"服务端通过反射调用方法","id":"服务端通过反射调用方法","index":"1.9"},{"title":"服务端将数据返回给客户端","id":"服务端将数据返回给客户端","index":"1.10"},{"title":"测试","id":"测试","index":"1.11"}]},{"title":"写在最后","id":"写在最后","index":"2"}]}